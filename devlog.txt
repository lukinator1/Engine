1-11-19
Made a tentantive Z specification of the main engine and one of the commponents (the math library). I've chosen my order of implementation based upon the level of dependency iy has with other components of the engine, starting with the baseline things or things that don't depend on other subsystems first. I also got started on engine setup, with an entry point, and made classes of some components although most are just empty.

1-12-19
plan: do as much as I can on the error handler/logger
Wrote 1 line of code because I had other work to do. 

1-13-19
Attempted to make an error manager, but chose not to because of exception handling issues (overhead + stack unraveling), so will put error messages throughout code, using a logger. Added empty filehandler class, which may in the future wrap std file functions. Set up the memory manager class, plan to have a double ended stack allocator and a single frame/double buffered memory allocator. It's at a higher level of abstraction than I thought so I may try to implement these things later. 

1-14-19
plan:
implement event/messenger class, window class (with tie in to configuration file), get as far as I can 
Tried to implement the messenger class, got kind of confused and scared to set it up the wrong way so I tried to implement the window class instead first instead, which would make sense since it's at a lower level of abstraction, but the main game loop wouldn't work anymore so I tried to change where it would be. After this, I tried to reeimplement the window class and I think I caused a bug in visual studio from moving files aronund, making me have to make an entirely new project file (I still have the code). I'll try to implement it as an .exe instead of a .dll since I'm not familiar with how .dll's work this time around.

1-15-19
plan:
implement a window class, input receiver handler
Got a little bit started on the window class.

1-16-19
plan: finish window class + input handler
I think I've got most of what I need for the window class (still need to include something for resolutions + the icon), did a little bit of research on how inputs work for SDL2. 

1-17-19
Input class, event system.

1-18-19
Input class, event system progress.

1-19-19
Input class + event system look for the most part done.

1-20-19
Made progress on the memory manager, but running into some issues with using the logging function, may just pass it in as an event.

1-21-20 
Fixed the logging issue, made decent progress on the memory manager class. Got an ok amount done but would've liked to do more. This class is a little bit more complicated at times.

1-22-20
plan: memory manager, time + engine loop setup, started on math library
Finished the stack allocator. It's a good design to apply formal methods to. 

1-23-20
Got busy with other classes + things. Wasn't able to do anything today, hope to work on it tommorrow, the plan is the same. 

1-24-20
Did work for other classes, decided to take a break today.

1-25-20
I couldn't quite figure out how to implement the memory defragmenter, it was kind of difficult. I decided to just put it off for now since it was an auxiliary part anyways. But the single frame + dubble buffer allocators got implemented, at least everything else works. 

1-26-20
plan: look into resource manager/databse, if not, time class, math library, if possible start on rendering
I did most of what I had planned for today. The time system is there but not a full time class, I've decided to implement the necessary parts of the engine first, and specifically ones in which formal methods could be applied to, the time class can be extended later on if its necessary. Next will be the rendering engine, either the hardest or second hardest part of making the engine, behind physics. I expect the next month alone to be spent upon it, possibly more. My goal is to make it as simple as possible. 

1-27-20
plan: renderer
Talked with Mr. Thebaut today about the project, only worked on it a little bit with fixing the last part of the input handler. 

1-28-20
plan: renderer
Got started on the rendering engine.

1-29-20
Rendering.

1-30-20
Trying to figure out rendering.

1-31-20
Got some good tutorials on rendering I made decent progress and managed to render a triangle of different colors. It's important to not get too excited on frontend work since most of the work to this point has been on backend things, which you won't see on the screen.

2-1-20
plan: rendering


possible errors:
change absolute path in include directories property page
#undef main

possible things to add: 
time
make things pass by reference
